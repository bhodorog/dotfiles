; automatically switch to lisp-mode for given files
(setq auto-mode-alist (cons '("dotemacs" . lisp-mode) auto-mode-alist))
(setq auto-mode-alist (cons '("emacscustom" . lisp-mode) auto-mode-alist))

;; Prerequisite: Emacs >= 24
(require 'package)
(package-initialize)
(add-to-list 'package-archives
	     '("melpa" . "http://melpa.milkbox.net/packages/"))
(add-to-list 'package-archives
	     '("marmalade" . "http://marmalade-repo.org/packages/") t)

(package-refresh-contents)

(defun install-if-needed (package)
  (unless (package-installed-p package)
    (package-install package)))

;; make more packages available with the package installer
(setq to-install
      '(magit yasnippet jedi auto-complete autopair find-file-in-repository))

(mapc 'install-if-needed to-install)

(require 'magit)
(require 'auto-complete)
(require 'flymake)
(require 'yasnippet)

; auto-complete mode extra settings
(setq
 ac-auto-start 2
 ac-override-local-map nil
 ac-use-menu-map t
 ac-candidate-limit 20)

; python.el settings
(add-hook 'python-mode-hook
          (lambda()
            (interactive) (column-marker-2 79)
            (interactive) (column-marker-1 80)
            ))

(require 'jedi)
;; It's also required to run "pip install --user jedi" and "pip
;; install --user epc" to get the Python side of the library work
;; correctly.
;; With the same interpreter you're using.

;; if you need to change your python intepreter, if you want to change it
;; (setq jedi:server-command
;;       '("python2" "/home/andrea/.emacs.d/elpa/jedi-0.1.2/jediepcserver.py"))
(add-hook 'python-mode-hook
	  (lambda ()
	    (jedi:setup)
	    (jedi:ac-setup)
            (local-set-key "\C-cd" 'jedi:show-doc)
            (local-set-key (kbd "M-SPC") 'jedi:complete)
            (local-set-key (kbd "M-.") 'jedi:goto-definition)
            (setq show-trailing-whitespace t)
            (autopair-mode t)
            (yas-minor-mode t)
            (which-function-mode 1)
            (outline-minor-mode t)
            (setq coding-system-for-write 'utf-8)
            ))

;; Flymake settings for Python
(defun flymake-python-init ()
  (let* ((temp-file (flymake-init-create-temp-buffer-copy
                     'flymake-create-temp-inplace))
         (local-file (file-relative-name
                      temp-file
                      (file-name-directory buffer-file-name))))
    (list "~/.epylint" (list local-file))))

(defun flymake-activate ()
  "Activates flymake when real buffer and you have write access"
  (if (and
       (buffer-file-name)
       (file-writable-p buffer-file-name))
      (progn
        (flymake-mode t)
        ;; this is necessary since there is no flymake-mode-hook...
        (local-set-key (kbd "C-c n") 'flymake-goto-next-error)
        (local-set-key (kbd "C-c p") 'flymake-goto-prev-error))))

(defun ca-flymake-show-help ()
  (when (get-char-property (point) 'flymake-overlay)
    (let ((help (get-char-property (point) 'help-echo)))
      (if help (message "%s" help)))))

(add-hook 'post-command-hook 'ca-flymake-show-help)


(add-to-list 'flymake-allowed-file-name-masks
             '("\\.py\\'" flymake-python-init))


(add-hook 'python-mode-hook 'flymake-activate)
(add-hook 'python-mode-hook 'auto-complete-mode)

(global-set-key [(meta /)] 'dabbrev-expand)
(global-set-key [(control /)] 'hippie-expand)
;; toggle showing whitespace globally
(global-set-key (kbd "\C-c \C-w")
                (lambda ()
                  (interactive)
                  (setq show-trailing-whitespace
                        (not show-trailing-whitespace))))

; Shortening of often used commands
(defalias 'gf 'grep-find)
(defalias 'fd 'find-dired)
(defalias 'sh 'shell)

(defalias 'qrr 'query-replace-regexp)
(defalias 'lml 'list-matching-lines)
(defalias 'dml 'delete-matching-lines)
(defalias 'rof 'recentf-open-files)

(defalias 'eb 'eval-buffer)
(defalias 'er 'eval-region)

(defalias 'hr 'highlight-regexp)
(defalias 'ur 'unhighlight-regexp)

(defalias 'dtw 'delete-trailing-whitespace)

; Misc settings
(transient-mark-mode t)
(show-paren-mode t)
(column-number-mode t)
(setq scroll-step 1)
(delete-selection-mode nil)
(setq inhibit-splash-screen -1)
(cua-selection-mode t)
(setq-default indent-tabs-mode nil)   ;; Don't use tabs to indent
(setq tab-width 4)                    ;; Still if tabs are enabled make sure they're consistent
(defvaralias 'c-basic-offset 'tab-width) ;; Override the default
(defvaralias 'cperl-indent-level 'tab-width) ;; Override the default
(visual-line-mode t)
(tool-bar-mode nil)
(menu-bar-mode -1)                    ;; Disable menu bar, make space on the screen
(defalias 'yes-or-no-p 'y-or-n-p)     ;; Use y-n instead of verbose yes-no
(require 'uniquify)                   ;; Differentiate among buffers with the same name
(setq
 uniquify-buffer-name-style 'post-forward
 uniquify-separator ":")

(setq version-control t               ;; Use version numbers for backups
      kept-new-versions 16            ;; Number of newest versions to keep
      kept-old-versions 2             ;; Number of oldest versions to keep
      delete-old-versions t           ;; Ask to delete excess backup versions?
      backup-by-copying-when-linked t ;; Copy linked files, don't rename.
      backup-by-copying t             ;; Don't clobber symlinks
      backup-directory-alist
      '(("." . "~/.saves")))          ;; Don't litter my fs tree

